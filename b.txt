<?php
/**
 * Created by PhpStorm.
 * User: yiguowang
 * Date: 2018-04-07
 * Time: 18:20
 */
declare(strict_types=1); // 如果指定了函数的类型，那么会严格进行检查。

<<<<<<< .merge_file_a06836
<<<<<<< HEAD
// Laravel1212
=======
// Laravel
>>>>>>> f07912101cfa559405e1d197d47ac67d5f963db6
=======
// Laravel1212
>>>>>>> .merge_file_a08836
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Validator;

// Logic
use App\Logic\AdminToolsLogic;
use App\Logic\DriverPollingLogic;
use App\Classes\Factory\HelperFactory;
use App\Classes\Factory\LogicFactory;
// Helper
use App\Helpers\OttPayHelpers;
use App\Helpers\FoodhwyOneSignalHelper;
use App\Helpers\FoodhwyAdminHelper;

class AdminToolsController extends Controller
{
    use \App\Controllers\Traits\traitAdminMenu;
    use APIControllerHelper;

    /**
     * 入口
     *
     * @return mixed
     */
    public function index()
    {
        $output = [];

        return $this->genView('admin.tools.tools_index', $output);
    }

    /**
     * 查看司机的 redis 数据
     *
     * @return mixed
     */
    public function viewDriverRedisData()
    {
        $aid = trim(Input::get('aid', ''));

        $data = '数据会显示在这里';
        $latlng_for_map = '0,0';
        $str_time = '';

        if ('' !== $aid) {
            $adminToolsLogic = new AdminToolsLogic();

            $data = $adminToolsLogic->getDriverDataInRedis($aid);

            if (! $data) {
                $data = '找不到对应的数据';
            }

            $lat = isset($data['latitude']) ? $data['latitude'] : '0';
            $lng = isset($data['longitude']) ? $data['longitude'] : '0';
            $latlng_for_map = "{$lat},{$lng}";
            $str_time = isset($data['ts_updated']) ? date('Y-m-d H:i:s', intval($data['ts_updated'])) : '';
        }

        $output = [
            'aid' => $aid,
            'str_time' => $str_time,
            'data_in_array' => var_export($data, true),
            'latlng_for_map' => $latlng_for_map,
        ];

        return View::make('admin/tools/tools_redis_driver', $output);
    }

    /**
     * 查看某日以来因抢单而产生的补贴金额
     *
     * @return mixed
     */
    public function calQdLost()
    {
        // 开始日期（含）
        $date_start = trim(Input::get('date_start', date('Y-m-d')));
        // 结束日期（不含）
        $date_end = trim(Input::get('date_end', date('Y-m-d')));

        $is_submit    = intval(Input::get('is_submit', 0)); // 仅在表单提交时该值才为"1"，以此避免无意义的查询。
        $count_orders = 0; // 订单总数
        $sum_amount   = 0; // 总额

        if ($is_submit) {
            $ts_start = strtotime($date_start);
            $ts_end   = strtotime($date_end);

            $sql = <<<EOF
SELECT
COUNT(1) AS `OrderCount`, AVG(delivery_duration) AS 'duration', SUM(oa.driver_deduct_money) AS `SumAmount`
FROM
  orders AS o
LEFT JOIN
  `orders_addition` AS oa ON o.id = oa.order_id
LEFT JOIN
  delivery_assign AS da ON o.id = da.order_id

 INNER JOIN admin as A ON A.aid = da.deliverer_id
WHERE
  o.created_at >= {$ts_start} AND o.created_at < {$ts_end} AND o.status >= 11 AND o.shipping_type = 'delivery' AND da.order_from = 'grabone'
EOF;

            try {
                $query = DB::select($sql);
            } catch (\Illuminate\Database\QueryException $e) {
                die($e->getMessage());
            }

            $count_orders = $query[0]->OrderCount;
            $sum_amount   = floatval($query[0]->SumAmount);
        }

        $output = [
            'date'         => $date_start,
            'count_orders' => $count_orders,
            'sum_amount'   => $sum_amount,
            'is_submit'    => $is_submit,
        ];

        return View::make('admin/tools/qd_lost', $output);
    }

    // region 查询 Redis 的 key
    public function uiDisplayRedisKey()
    {
        // 常用的 redis 的 key 前缀
        $common_used_keys_prefix = [
            'location:driver:',
            'polling:order:',
            'polling:log:',
            'polling:error:',
            'settings:city:',
        ];

        $output = [
            'uri_query' => action('AdminToolsController@acDisplayRedisKey'),
            'common_used_keys_prefix' => $common_used_keys_prefix,
        ];

        return View::make('admin/tools/display_redis_key', $output);
    }

    public function acDisplayRedisKey()
    {
        $prefix     = trim(Input::get('prefix', ''));
        $prefix_id  = trim(Input::get('prefix_id', ''));
        $custom_key = trim(Input::get('custom_key', ''));

        // 决定用哪一种 key 来查询
        if ('' === $custom_key) {
            $redis_key = "{$prefix}{$prefix_id}";
        } else {
            $redis_key = $custom_key;
        }

        /** @var \App\Helpers\FoodhwyRedisHelper $redisHelper */
        $redisHelper = HelperFactory::create('redis');

        $redis = $redisHelper->getRedisInstance();

        // 要考虑不同的 key 需要不同的 redis 方法来读取。
        $result_decide = $this->_decideRedisMethod($redis_key);
        if (false === $result_decide) {
            return $this->genJSONResult(0, 'Failed to get method of Redis.');
        }

        // 调用对应的 redis 方法来获取指定 key 的值。
        list($redis_method, $params) = $result_decide;
        $value = call_user_func_array([$redis, $redis_method], $params);

        // 尝试取出的值如果是字符串，那么尝试能否将其反序列化为 array，因为很多值是以序列化之后的 string 存储的。
        if (is_string($value)) {
            $try_unserialize = unserialize($value);
            if (false !== $try_unserialize) {
                $value = $try_unserialize;
            }
        }

        // 便于浏览器端显示，这里要将取出的值转换为 string，否则浏览器端通过 ajax 拿到的是一个 object，无法直接显示在页面中。
        $str_value = $value ? var_export($value, true) : '';
        if ('' === $str_value) {
            $str_value = "No data in key '{$redis_key}'.";
        }

        return $this->genJSONResult(1, '', [
            'redis_key' => $redis_key,
            'redis_value' => $str_value,
        ]);
    }

    /**
     * 根据不同类型的 redis key 来决定所要使用的方法和参数。
     *
     * @param string $key Redis key name
     *
     * @return array|bool Array or boolean.
     */
    private function _decideRedisMethod($key)
    {
        $patterns_mapping = [

            // 司机位置
            [
                "/^location:driver:(\d+)$/",
                [
                    'hgetall',
                    [$key]
                ]
            ],

            // 订单轮询日志
            [
                "/^polling:log:(\d+)$/",
                [
                    'get',
                    [$key]
                ]
            ],
            [
                "/^polling:order:(\d+)$/",
                [
                    'get',
                    [$key]
                ]
            ],
            [
                "/^settings:city:(\d+)$/",
                [
                    'get',
                    [$key]
                ]
            ],
            [
                "/^polling:error:(\d+)$/",
                [
                    'lrange', // 方法名
                    [$key, 0, 10000] // 方法所需的参数
                ]
            ],
        ];

        // 如果匹配到了对应的 key 的命名规则，那么返回对应的 redis 方法和所需的参数。
        foreach ($patterns_mapping as $v) {
            if (preg_match($v[0], $key)) {
                return $v[1];
            }
        }

        return false;
    }
    // endregion 查询 Redis 的 key

    // region 重建 redis 中特定日期的司机排版列表
    public function uiRebuildDriverScheduleInRedis()
    {
        /** @var \App\Helpers\FoodhwyAreaHelper $areaHelper */
        $areaHelper = HelperFactory::create('area');

        $cities = $areaHelper->fetchCityList();

        $output = [
            'uri_query' => action('AdminToolsController@acRebuildDriverScheduleInRedis'),
            'cities' => $cities,
        ];

        return View::make('admin/tools/rebuild_driver_schedule', $output);
    }

    public function acRebuildDriverScheduleInRedis()
    {
        // 工作日期：yyyy-mm-dd
        $working_day = trim(Input::get('working_date', date('Y-m-d')));
        // 城市 id
        $city_id = Input::get('city_id', 0);
        // 是否重建全部城市（忽略"城市 id"）
        $rebuild_all = intval(Input::get('confirm', '0'));

        try {
            $query = DriverSchedule::where('working_day', $working_day);

            if (0 === $rebuild_all) {
                $query->where('city_id', intval($city_id));
            }

            $schedules = $query->get();
        } catch (\Illuminate\Database\QueryException $e) {
            return $this->genJSONResult(0, $e->getMessage());
        }

        // 如果没有记录需要处理就退出。
        $count_schedules = $schedules->count();
        if (0 === $count_schedules) {
            return $this->genJSONResult(0, "No data need to rebuild.");
        }

        /** @var \App\Logic\DriverScheduleLogic $driverScheduleLogic */
        $driverScheduleLogic = LogicFactory::create('DriverScheduleLogic');

        $schedules->each(function($data) use ($driverScheduleLogic) {
            $arr_data = $data->toArray();
            $driverScheduleLogic->saveSingleScheduleInRedis($arr_data);
        });

        return $this->genJSONResult(1, '', [
            'rows_created' => $count_schedules
        ]);
    }
    // endregion 重建 redis 中特定日期的司机排版列表

    // region OttPay
    public function uiDecodeOttPay()
    {
        $output = [
            'uri_query' => action('AdminToolsController@acDecryptOttPay'),
        ];

        return View::make('admin/tools/decode_ottpay', $output);
    }

    public function acDecryptOttPay()
    {
        $data = trim(Input::get('data', ''));
        $md5  = trim(Input::get('md5', ''));

        $helper = new OttPayHelpers();
        $json = $helper->decryptData($data, $md5);

        return $this->genJSONResult(1, '', [
            'result' => var_export($json, true),
        ]);
    }
    // endregion OttPay

    // region 向 app 发送测试推送
    public function uiSendTestingNotification()
    {
        $app_types = [
            'driver' => '司机端',
            'merchant' => '商家端',
            'customer' => '客户端',
        ];

        // 附加参数的范例，显示在 textarea 中。
        $extra_params_example = implode(PHP_EOL, [
            'here_is=example',
            'order_id=0',
        ]);

        $output = [
            'uri_query' => action('AdminToolsController@acSendTestingNotification'),
            'app_types' => $app_types,
            'extra_params_example' => $extra_params_example,
        ];

        return View::make('admin/tools/test_notification_sending', $output);
    }

    public function acSendTestingNotification()
    {
        $app_type   = trim(Input::get('app_type', ''));
        $target_id  = intval(Input::get('target_id', '0'));
        $player_id  = trim(Input::get('player_id', ''));
        $title      = trim(Input::get('title', '')); // 可选
        $content    = trim(Input::get('content', '')); // 可选
        $raw_params = trim(Input::get('params', ''));

        // 获取 OneSignal player-id
        if ('' === $player_id) {
            // 从 admin 表获取 player id
            $player_id = $this->_getOneSignalPlayerId($app_type, $target_id);

            if ('' === $player_id) {
                return $this->genJSONResult(0, "Failed to get OneSignal's player-id.");
            }
        }

        $arr_params = $this->_parseExtraParams($raw_params);

        // 发送推送
        $pushHelper = new FoodhwyOneSignalHelper($this->_getOneSignalAppId($app_type));
        $use_custom_sound = true;
        if (! $pushHelper->sendMessage($player_id, $title, $content, $arr_params, $use_custom_sound)) {
            $error = $pushHelper->getMessage();
            if (false === is_string($error)) {
                $error = var_export($error, true);
            }

            return $this->genJSONResult(0, $error);
        }

        return $this->genJSONResult(1, '', [
            'result' => '',
        ]);
    }

    /**
     * 根据 app 类型获取不同种类用户的 player-id
     * @param string $app_type
     * @param int    $target_id
     *
     * @return string OneSignal player-id 或空字符串。
     */
    private function _getOneSignalPlayerId(string $app_type, int $target_id): string
    {
        if (in_array($app_type, ['driver', 'merchant'])) {
            $admin = Admin::find($target_id);
            if (! $admin) {
                return '';
            }

            return trim($admin->onesignal_player_id);
        }

        if (in_array($app_type, ['customer'])) {
            $customer = Customer::find($target_id);
            if (! $customer) {
                return '';
            }

            return trim($customer->onesignal_player_id);
        }

        return '';
    }

    private function _parseExtraParams(string $raw_params): array
    {
        $result = [];

        $arr_raw = explode(PHP_EOL, $raw_params);
        if (!is_array($arr_raw) OR !$arr_raw) {
            return $result;
        }

        // 将传入的原始的文本参数解析和返回为数组
        array_map(function($item) use (&$result) {
            $arr_item = explode('=', trim($item));
            if (2 == count($arr_item)) {
                $key = trim($arr_item[0]);
                $val = str_replace(' ', '', trim($arr_item[1]));
                $result[$key] = $val;
            }
        }, $arr_raw);

        return $result;
    }

    private function _getOneSignalAppId($app_type)
    {
        $app_id = '';

        switch ($app_type) {
            case 'driver':
                $app_id = Config::get('foodhwy_notification.onesignal_app_id', '');
                break;

            case 'merchant':
                $app_id = Config::get('foodhwy_notification.onesignal_app_id_merchant', '');
                break;

            case 'customer':
                $app_id = Config::get('foodhwy_notification.onesignal_app_id_customer', '');
                break;
        }

        return $app_id;
    }
    // endregion 向 app 发送测试推送

    // region 订单轮询预览
    public function uiPollingPreview()
    {
        $sort_array = $this->_getPollingPreviewSortTypes();

        $output = [
            'uri_query' => action('AdminToolsController@acPollingPreview'),
            'sorting_types' => $sort_array,
        ];

        return View::make('admin/tools/polling_preview', $output);
    }

    public function acPollingPreview()
    {
        $order_id = intval(Input::get('order_id', 0)); // 订单 id
        $sort     = trim(Input::get('sort', '')); // 排序方式

        $order = Order::find($order_id);
        if (! $order) {
            return $this->genJSONResult(0, "Failed to get order #{$order_id}.", []);
        }

        $sort_array = $this->_getPollingPreviewSortTypes();
        $logic = new DriverPollingLogic();
        $polling_settings = $logic->initPollingSettings($order->city_id);
        if(in_array($sort, $sort_array))
        {
            $polling_settings->sort = $sort;
        }
        //获取订单附近的司机rank列表
        $drivers = $logic->getOrderPollingDrivers($order_id, $polling_settings);

        return $this->genJSONResult(1, '', [
            'drivers' => var_export($drivers, true),
        ]);
    }

    private function _getPollingPreviewSortTypes()
    {
        return [
            DriverPollingLogic::ROUTES_SORT_INC_DISTANCE,
            DriverPollingLogic::ROUTES_SORT_ORDER_COUNT,
            DriverPollingLogic::ROUTES_SORT_STEP_COUNT,
            DriverPollingLogic::ROUTES_SORT_SUM_DISTANCE,
            DriverPollingLogic::ROUTES_SORT_RANKS
        ];
    }
    // endregion 订单轮询预览

    // region 查看订单 pay log
    public function uiPayLog()
    {
        $order_id  = intval(Input::get('order_id', 0));
        $is_submit = intval(Input::get('is_submit', 0));

        // 查询结果
        $results = [];

        if ($is_submit AND $order_id) {
            // 查询数据
            $results = $this->_getPayLogs($order_id);
        }

        $output = [
            'form_action' => action('AdminToolsController@uiPayLog'),
            'order_id' => $order_id,
            'results'  => $results,
        ];

        return View::make('admin.tools.pay_log', $output);
    }

    private function _getPayLogs(int $order_id)
    {
        $results = DB::table('pay_log')
                     ->where('order_id', $order_id)
                     ->orderBy('id', 'asc')
                     ->get();

        return $results;
    }
    // endregion 查看订单 pay log

    // region 查询工具
    /**
     * 查询工具列表及首页
     * @return \App\Controllers\Traits\Illuminate\View\View
     */
    public function queryToolsUI()
    {
        $queryTools = new AdminToolsLogic();
        $query_list = $queryTools->getQueryToolsList();
        $output = [
            'uri_form' => action('AdminToolsController@storeNewQuerySql'),
            'query_list'    => $query_list
        ];
        return $this->genView('admin.tools.query_tools.new', $output);
    }

    /**
     * 保存查询sql
     * @return mixed
     */
    public function storeNewQuerySql()
    {
        $post = Input::all();

        $rules = [
            'query_name'   => 'required|string',
            'query_sql'    => 'required|string',
        ];

        $validator = Validator::make($post, $rules);
        if ($validator->fails()) {
            return $this->genJSONResult(0, $validator->errors()->first());
        }

        $queryTools = new AdminToolsLogic();
        $query_res  = $queryTools->saveQuerySql($post);
        if (!$query_res){
            return $this->genJSONResult(0, $queryTools->getMessage());
        }else{
            return $this->genJSONResult(1, '');
        }

    }

    /**
     * 某一查询表单页
     */
    public function queryFormUI($query_id)
    {
        $query_id  = intval($query_id);

        $queryTools = new AdminToolsLogic();

        $query_info = $queryTools->getQuerySqlById($query_id);

        $form_input = $this->parseSqlToFormInput($query_info['query_sql']);

        //处理表单中特殊的输入框如order_status xxx:city 的返回值
        $form_input = $this->getOptionsListFromFormInput($form_input);
        //print_r($form_input);exit;

        $output = [
            'uri_form' => action('AdminToolsController@storeNewQuerySql'),
            'query_info'    => $query_info,
            'query_list'    => $queryTools->getQueryToolsList(),
            'form_input'   => $form_input
        ];

        return $this->genView('admin.tools.query_tools.form', $output);
    }

    /**
     * 某一查询表单查询操作
     */
    public function queryFormAction()
    {
        $post = Input::all();

        if (!isset($post['query_id']) && intval($post['query_id']) < 1){
            return $this->genJSONResult(0, '参数错误');
        }
        //判断是否下载
        $is_download = false;
        if(isset($post['download']) && $post['download']){
            $is_download = true;
            unset($post['download']);
        }

        $query_id = intval($post['query_id']);
        unset($post['query_id']);


        $queryTools = new AdminToolsLogic();
        $query_info = $queryTools->getQuerySqlById($query_id);

        $res = $this->parseFormInputToSql($post,$query_info['query_sql']);
        if ($res === false){
            return $this->genJSONResult(0, '参数个数或者格式不匹配');
        }

        $data_list = $queryTools->executeToolsSql($res[0],$res[1],$is_download);

        if(false === $data_list){
            return $this->genJSONResult(0, $queryTools->getMessage());
        }

        if ($is_download){
            if (count($data_list)>0){
                $this->queryResultDownload($query_info,$data_list);
            }else{
                return $this->genJSONResult(0, '数据为空，无效下载');
            }
        }

        return $this->genJSONResult(1, '',$data_list);

    }
    /**
     * 查询结果下载
     */
    private function queryResultDownload($query_tools,$excel_data)
    {
        require_once(base_path() . '/app/3rd/PHPExcel/Classes/PHPExcel.php');
        // 创建一个excel
        $objPHPExcel = new \PHPExcel();
        $objPHPExcel->setActiveSheetIndex(0);

        $letter = 65;

        foreach ($excel_data as $key =>$value){
            $value =  json_decode( json_encode( $value),true);
            foreach ($value as $k =>$val){
                $cell_key = strtoupper(chr($letter++));
                //处理表格列名
                if ($key == 0){
                    $objPHPExcel->getActiveSheet()->setCellValue( $cell_key.'1', $k);
                }
                $objPHPExcel->getActiveSheet()->setCellValue(''.$cell_key.($key+2), $val);
            }
            $letter = 65;
        }

        $objWriter = new \PHPExcel_Writer_Excel5($objPHPExcel);

        $filename = $query_tools['query_name'];
        if (ob_get_contents()) ob_end_clean();//清除缓冲区,避免乱码
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="'.$filename.'.xls"');
        header('Cache-Control: max-age=0');
        // 如果是在ie9浏览器下，需要用到这个
        header('Cache-Control: max-age=1');
        // 如果你是在ie浏览器或者https下，需要用到这个
        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header('Pragma: public'); // HTTP/1.0
        $objWriter->save('php://output');
    }

    /**
     * 解析sql中的from表单信息
     */
    private function parseSqlToFormInput($sql)
    {
        $form_input = [];

        if (preg_match_all("/{#([a-zA-Z_:]+)}/", $sql, $match)){
            foreach ($match[1] as $value){
                $form_input[] = explode(':',$value);
            }
        }
        return $form_input;
    }

    /**
     * from表单信息替换sql中的变量
     */
    private function parseFormInputToSql($form_input=[],$sql='')
    {
        $return_sql  = '';
        $return_data = [];

        //表单提交的数据和sql中需要匹配的数据不一致 返回false
        $sql_form = $this->parseSqlToFormInput($sql);
        if (count($form_input) != count($sql_form)){
            return false;
        }

        //sql中需要绑定的数据个数和表单提交的数据不一致 返回false
        $return_sql = preg_replace('/{#[a-zA-Z_:]+}/', '?', $sql, -1 , $count);

        if ($count != count($form_input)){
            return false;
        }

        //对比表单提交数据和sql需要的数据
        foreach ($sql_form as $value){
            if (isset($form_input[$value[0]])){
                $return_data[] = $form_input[$value[0]];
            }
        }

        if( count($return_data) != $count ){
            return false;
        }

        return [$return_sql,$return_data];

    }

    private function getOptionsListFromFormInput($inputs=[]){
        foreach ($inputs as &$value){
            if (!isset($value[1])) continue;
            switch ($value[1]){
                case 'order_status':
                    $value[2] = Order::$status_text;
                    break;
                case 'city_id':
                    $areaHelper = HelperFactory::create('area');
                    $citys = $areaHelper->fetchCityList();
                    $value[2] = array_column($citys,'name','id');
                    break;
                case 'city_name':
                    $areaHelper = HelperFactory::create('area');
                    $citys = $areaHelper->fetchCityList();
                    $value[2] = array_column($citys,'name','name');
                    break;

            }
        }
        return $inputs;
    }
    // endregion 查询工具

    //region 菜单图片

    public function productImages(){

        $authHelper = new AuthHelper();

        // 获取城市列表
        $cities = $authHelper->getManagedCities(821);
        $cities_select = [];
        foreach ($cities as $city) {
            $cities_select[$city['id']] = $city['name'];
        }

        $output = [
            'uri_query' => action('AdminToolsController@acSendTestingNotification'),
            'cities' => $cities_select
        ];

        return $this->genView('admin.tools.products_images_tools', $output);
    }


    public function productImagesDownload(){

        $city_name  = trim(Input::get('city', ''));
        $image      = intval(Input::get('image', 0));
        $shop_id    = intval(Input::get('shop_id', 0));
        $is_download= intval(Input::get('download', 0));

        $authHelper  = new AuthHelper();
        $adminHelper = new FoodhwyAdminHelper();

        // 获取城市列表
        $cities = $authHelper->getManagedCities(821);
        $cities_select = [];
        foreach ($cities as $city) {
            $cities_select[$city['id']] = $city['name'];
        }
        //判断是否有地区操作权限
        if (!empty($city_name) && !in_array($city_name,$cities_select)){
            return $this->genJSONResult(0, '地区权限不正确');
        }

        //判断是否有商店的操作权限
        $shop_ids = $authHelper->getManagedShopIds(821);
        if ($shop_id > 0 && !in_array($shop_id,$shop_ids)){
            return $this->genJSONResult(0, '商家权限不正确');
        }

        //如果指定了地区
        $shop_id_arr = [];
        if (!empty($city_name)){

            $shops = Shop::where('city',$city_name)->get();
            foreach ($shops as $shop){
                $shop_id_arr[] = $shop->mid;
            }
        }

        $query = DB::table('products')
                        ->join('product_revision','products.revision_id','=','product_revision.id');

        if ($shop_id > 0){      //指定了商家id 忽略地区
            $query = $query->where('shop_id', $shop_id);
        }else{                  //没有指定了商家id
            if (count($shop_id_arr)>0){
                $query = $query->whereIn('shop_id',$shop_id_arr);
            }
        }

        //忽略已下架的菜品  下架-2 停售-1 在售 0
        $query = $query->where('status','<',2);

        //筛选有图
        if ($image === 1){
            $query = $query->where('product_revision.image','>','')
                            ->whereNotNULL('product_revision.image');
        }

        //筛选无图
        if ($image === 0){
            $query = $query->where(function ($qry) {
                $qry->whereNULL('product_revision.image')->orWhere('product_revision.image','');
            });
        }


        if ($is_download){
            $products_arr = $query->get();
            if (is_array($products_arr)){
                $this->downloadProductImageCsv($products_arr);
            }else{
                return $this->genJSONResult(0, '搜索异常');
            }

        }else{

            return $this->genJSONResult(1, '',$query->count());
        }
    }

    //下载菜单csv
    private function downloadProductImageCsv($products){
        require_once(base_path() . '/app/3rd/PHPExcel/Classes/PHPExcel.php');

        ini_set ('memory_limit', '256M');

        // 创建一个excel
        $objPHPExcel = new \PHPExcel();
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1', '')
            ->setCellValue('B1', '店铺id')
            ->setCellValue('C1', '菜品id')
            ->setCellValue('D1', '菜品名称')
            ->setCellValue('E1', '类别')
            ->setCellValue('F1', '图片(url)');
        foreach ($products as $key =>$pds){
            $objPHPExcel->getActiveSheet()->setCellValue('A' . ($key+2), '');
            $objPHPExcel->getActiveSheet()->setCellValue('B' . ($key+2), $pds->shop_id);
            $objPHPExcel->getActiveSheet()->setCellValue('C' . ($key+2), $pds->product_id);
            $objPHPExcel->getActiveSheet()->setCellValue('D' . ($key+2), $pds->name);
            $objPHPExcel->getActiveSheet()->setCellValue('E' . ($key+2), $pds->category);
            $objPHPExcel->getActiveSheet()->setCellValue('F' . ($key+2), $pds->image);
        }

        $objWriter = new \PHPExcel_Writer_Excel5($objPHPExcel);

        $filename = 'image_list_'.date("Y-m-d",time());
        if (ob_get_contents()) ob_end_clean();//清除缓冲区,避免乱码
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="'.$filename.'.xls"');
        header('Cache-Control: max-age=0');
        // 如果是在ie9浏览器下，需要用到这个
        header('Cache-Control: max-age=1');
        // 如果你是在ie浏览器或者https下，需要用到这个
        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header('Pragma: public'); // HTTP/1.0
        $objWriter->save('php://output');

    }

    public function uploadZip()
    {
        $file_field = 'product_images';

        $obj_input_file = Input::hasFile($file_field)
            ? Input::file($file_field)
            : false;
        if (false === $obj_input_file) {
            $this->rudeJSAlertBack("没有上传zip文件");
        }

        $tmp_file_path = $obj_input_file->getRealPath();

        //利用zip_open函数打开压缩包
        $zip = zip_open($tmp_file_path);
        if (!$zip || !is_resource($zip)) {
            $this->rudeJSAlertBack("压缩包打开失败");
        }

        // 创建目录
        $path = "media/bid-821/products/";
        if (!file_exists(public_path() . "/{$path}")) {
            if (!mkdir(public_path() . "/{$path}", 0755, true)) {
                return ['error' => 1, 'msg' => '创建目录失败'];
            }
        }

        $excel_data_arr = [];
        $tmp_image_arr  = [];

        $counter = 0;
        //循环处理zip中的文件
        while ($zip_entry = zip_read($zip))     //读依次读取包中的文件
        {
            //根据文件名来判断类型
            $filename = zip_entry_name($zip_entry);
            $tmp_arr = explode('.',$filename);
            $ext_str = end($tmp_arr);

            // 过滤掉 Mac OS 下产生的缩略图文件。
            if(substr($filename, 0, 9) === "__MACOSX/") {
                continue;
            }

            //如果文件大小为0退出操作
            $file_size = zip_entry_filesize($zip_entry);
            if (!$file_size) {
                continue;
            }

            $filename_arr = explode('/',$filename);
            //处理csv或者xls表格  压缩包中第一个文件必须是表格 不然不做处理
            //  稍后会根据表格图片地址来写入图片 避免不必要的图片上传
            if ($counter === 0 && in_array($ext_str,['csv','xls'])){

                if (zip_entry_open($zip, $zip_entry, 'r')) {
                    //读取文件二进制数据
                    $buffer = zip_entry_read($zip_entry, zip_entry_filesize ($zip_entry));
                    //写入图片
                    $fp = fopen( $path  . end($filename_arr) , 'w+');
                    fwrite($fp, $buffer);
                    fclose($fp);

                    zip_entry_close($zip_entry);
                }

                if (!file_exists($path  .end($filename_arr))){
                    $this->rudeJSAlertBack("操作失败");
                }

                //引入phpexcel
                require_once(base_path() . '/app/3rd/PHPExcel/Classes/PHPExcel/IOFactory.php');
                //实例化文件
                try {
                    $inputFileType = PHPExcel_IOFactory::identify($path  .end($filename_arr));
                    $objReader = PHPExcel_IOFactory::createReader($inputFileType);
                    $objReader->setReadDataOnly(true);
                    $objPHPExcel = $objReader->load($path  .end($filename_arr));
                } catch(Exception $e) {
                    return ['error'=>2,'msg'=>$e->getMessage()];
                }
                //读取第一个sheet表的内容
                $sheet = $objPHPExcel->getSheet(0);

                $excel_data_arr = $sheet->toArray();
                if(count($excel_data_arr) > 0){
                    foreach ($excel_data_arr as $key => $value ){
                        if ($key == 0 ) continue;
                        //一个图片对应多个产品
                        $tmp_image_arr[$value[5]][] = [
                            'shop_id'   => intval($value[1]),
                            'product_id'=> intval($value[2])
                        ];
                    }
                }else{
                    $this->rudeJSAlertBack("表格文件内容为空");
                }
            }

            if ($counter > 0 && in_array($ext_str,['jpg','png','jpeg'])){

                //判断图片是否被菜单中的产品相关
                $tmp = end($filename_arr);
                if (!array_key_exists($tmp,$tmp_image_arr)){
                    continue;
                }

                $buffer = false;
                if (zip_entry_open($zip, $zip_entry)) {
                    //读取文件二进制数据
                    $buffer = zip_entry_read($zip_entry, zip_entry_filesize ($zip_entry));

                    zip_entry_close($zip_entry);

                }


                //循环处理图片对应的产品入库
                foreach ($tmp_image_arr[$tmp] as $pre_product){

                    $shop_id    = $pre_product['shop_id'];
                    $product_id = $pre_product['product_id'];
                    $image_path = $path. $shop_id. '/'. $tmp;

                    //更新产品图片地址数据
                    $product  = Product::with('revision')->find($product_id);

                    if ($product && $buffer !== false){

                        // 创建目录
                        if (!file_exists(public_path() . "/" . $path. '/'. $shop_id)) {
                            if (!mkdir(public_path() .  "/" . $path. '/'. $shop_id, 0755, true)) {
                                return ['error' => 1, 'msg' => '创建目录失败'];
                            }
                        }

                        //写入图片
                        $fp = fopen( $image_path , 'w+');
                        fwrite($fp, $buffer);
                        fclose($fp);

                        // 复制产品的详细数据
                        try {
                            $copy_revision = $product->revision->replicate();
                            $copy_revision->image = '{{cdn_url}}/'. $image_path;
                            $copy_revision->save();
                            $copy_revision_id = $copy_revision->id;

                            // 将两者相互关联
                            $product->revision_id = $copy_revision_id;
                            $product->save();
                        } catch (\Illuminate\Database\QueryException $e) {
                            $this->rudeJSAlertBack($e->getMessage());
                        } catch (PDOException $e) {
                            $this->rudeJSAlertBack($e->getMessage());
                        }
                    }
                }
            }

            $counter++;
        }

        zip_close($zip);

        $this->rudeJSAlertBack("上传成功");
    }

    //endregion 菜单图片

}